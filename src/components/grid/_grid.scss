/// Grid component - ruler with labels
/// @param $name class name to add as a block suffix to parent class
/// @param $line-thickness main line thickness
/// @param $line-style main line style (all border styles are valid: solid, dashed, dotted ...)
/// @param $line-color main line color
/// @param $label-offset position of labels relative to grid
/// @param $label-font-size
/// @param $pip-max-size maximum size a pip can have
/// @param $pip-max-thickness maximum thickness a pip can have
/// @param $pip-color
/// @param $offset position relative to track
///
/// pip - mark on a grid showing position of certain value
@mixin grid(
  $name,
  $line-thickness,
  $line-style,
  $line-color,
  $label-offset,
  $label-font-size,
  $pip-max-size,
  $pip-max-thickness,
  $pip-color,
  $offset
) {
  $grid-name: $name;
  $cell-name: #{$name}-cell;

  @include element($grid-name) {
    position: relative;
    border-top: $line-thickness $line-style $line-color;

    @include modifier(horizontal) {
      width: 100%;
      top: $offset;
    }

    @include modifier(vertical) {
      height: 100%;
      width: 0;
    }
  }

  @include element($cell-name) {
    position: absolute;

    // label
    &::after {
      content: attr(data-label);
      position: absolute;
      font-size: $label-font-size;
    }

    @include modifier(horizontal) {
      transform: translateX(-50%);

      &-level-1 {
        height: $pip-max-size;
        border-left: $pip-max-thickness solid $pip-color;

        // move first pip inline with grid line
        &:first-child {
          transform: translateX(0px);
        }

        // move last pip inline with grid line
        &:last-child {
          transform: translateX(-$pip-max-thickness);
        }
      }

      &-level-2 {
        height: $pip-max-size - $pip-max-size / 3;
        border-left: ceil($pip-max-thickness / 2) solid $pip-color;
      }

      &-level-3 {
        height: $pip-max-size / 3;
        border-left: ceil($pip-max-thickness / 3) solid $pip-color;
      }

      &::after {
        top: calc(100% + #{$label-offset});
        transform: translateX(-50%);
      }
    }
  }
}
